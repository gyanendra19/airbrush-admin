<div class="section-content">
  <h2 class="h4 mb-3">Blog Management</h2>

  <div class="card border-0 shadow-sm overflow-hidden">
    <div class="card-body p-3">
      <!-- Header with subtle accent -->
      <div class="mb-3 pb-2 border-bottom d-flex justify-content-between align-items-center">
        <div>
          <h5 class="fw-semibold mb-0 text-primary">Blog Posts</h5>
          <p class="small text-muted mb-0">Manage your blog content</p>
        </div>
        <button id="addBlogBtn" class="btn btn-sm btn-primary rounded-pill px-3">
          <i class="bi bi-plus-lg me-1"></i>Add Blog
        </button>
      </div>

      <form class="needs-validation" novalidate id="blogForm">
        <div class="row g-3" id="blog-cards-container">
          <!-- Blog Card 1 -->
          <div class="col-md-6 blog-card" data-index="0">
            <div class="card h-100 border-0 shadow-sm hover-shadow-sm transition-all">
              <div class="position-relative">
                <div class="ratio ratio-4x3 bg-light rounded-top overflow-hidden">
                  <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg" class="card-img-top object-fit-cover blog-image" alt="Blog image">
                  <div class="position-absolute top-0 end-0 m-2">
                    <button type="button" class="btn-delete-image btn btn-sm btn-danger rounded-circle" style="width: 32px; height: 32px; padding: 0;">
                      <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; object-fit: contain; padding: 5px;">
                    </button>
                  </div>
                </div>
                <button type="button" class="replace-image-btn btn btn-sm btn-primary position-absolute bottom-0 start-0 m-2 rounded-pill px-2 py-1" style="font-size: 0.75rem;">
                  <i class="bi bi-image me-1"></i> Replace
                </button>
                <input type="file" class="d-none image-upload" accept="image/*">
              </div>
              <div class="card-body p-2">
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Title</label>
                  <input type="text" class="form-control form-control-sm blog-title" placeholder="Enter title" required>
                </div>
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Content</label>
                  <textarea class="form-control form-control-sm blog-content" placeholder="Enter blog content" rows="3"></textarea>
                </div>
                <div class="form-check">
                  <input class="form-check-input blog-is-lead" type="checkbox" value="" id="isLead0">
                  <label class="form-check-label small text-muted" for="isLead0">
                    Featured Blog
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- Blog Card 2 -->
          <div class="col-md-6 blog-card" data-index="1">
            <div class="card h-100 border-0 shadow-sm hover-shadow-sm transition-all">
              <div class="position-relative">
                <div class="ratio ratio-4x3 bg-light rounded-top overflow-hidden">
                  <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg" class="card-img-top object-fit-cover blog-image" alt="Blog image">
                  <div class="position-absolute top-0 end-0 m-2">
                    <button type="button" class="btn-delete-image btn btn-sm btn-danger rounded-circle" style="width: 32px; height: 32px; padding: 0;">
                      <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; object-fit: contain; padding: 5px;">
                    </button>
                  </div>
                </div>
                <button type="button" class="replace-image-btn btn btn-sm btn-primary position-absolute bottom-0 start-0 m-2 rounded-pill px-2 py-1" style="font-size: 0.75rem;">
                  <i class="bi bi-image me-1"></i> Replace
                </button>
                <input type="file" class="d-none image-upload" accept="image/*">
              </div>
              <div class="card-body p-2">
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Title</label>
                  <input type="text" class="form-control form-control-sm blog-title" placeholder="Enter title" required>
                </div>
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Content</label>
                  <textarea class="form-control form-control-sm blog-content" placeholder="Enter blog content" rows="3"></textarea>
                </div>
                <div class="form-check">
                  <input class="form-check-input blog-is-lead" type="checkbox" value="" id="isLead1">
                  <label class="form-check-label small text-muted" for="isLead1">
                    Featured Blog
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- Blog Card 3 -->
          <div class="col-md-6 blog-card" data-index="2">
            <div class="card h-100 border-0 shadow-sm hover-shadow-sm transition-all">
              <div class="position-relative">
                <div class="ratio ratio-4x3 bg-light rounded-top overflow-hidden">
                  <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg" class="card-img-top object-fit-cover blog-image" alt="Blog image">
                  <div class="position-absolute top-0 end-0 m-2">
                    <button type="button" class="btn-delete-image btn btn-sm btn-danger rounded-circle" style="width: 32px; height: 32px; padding: 0;">
                      <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; object-fit: contain; padding: 5px;">
                    </button>
                  </div>
                </div>
                <button type="button" class="replace-image-btn btn btn-sm btn-primary position-absolute bottom-0 start-0 m-2 rounded-pill px-2 py-1" style="font-size: 0.75rem;">
                  <i class="bi bi-image me-1"></i> Replace
                </button>
                <input type="file" class="d-none image-upload" accept="image/*">
              </div>
              <div class="card-body p-2">
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Title</label>
                  <input type="text" class="form-control form-control-sm blog-title" placeholder="Enter title" required>
                </div>
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Content</label>
                  <textarea class="form-control form-control-sm blog-content" placeholder="Enter blog content" rows="3"></textarea>
                </div>
                <div class="form-check">
                  <input class="form-check-input blog-is-lead" type="checkbox" value="" id="isLead2">
                  <label class="form-check-label small text-muted" for="isLead2">
                    Featured Blog
                  </label>
                </div>
              </div>
            </div>
          </div>

          <!-- Blog Card 4 -->
          <div class="col-md-6 blog-card" data-index="3">
            <div class="card h-100 border-0 shadow-sm hover-shadow-sm transition-all">
              <div class="position-relative">
                <div class="ratio ratio-4x3 bg-light rounded-top overflow-hidden">
                  <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg" class="card-img-top object-fit-cover blog-image" alt="Blog image">
                  <div class="position-absolute top-0 end-0 m-2">
                    <button type="button" class="btn-delete-image btn btn-sm btn-danger rounded-circle" style="width: 32px; height: 32px; padding: 0;">
                      <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; object-fit: contain; padding: 5px;">
                    </button>
                  </div>
                </div>
                <button type="button" class="replace-image-btn btn btn-sm btn-primary position-absolute bottom-0 start-0 m-2 rounded-pill px-2 py-1" style="font-size: 0.75rem;">
                  <i class="bi bi-image me-1"></i> Replace
                </button>
                <input type="file" class="d-none image-upload" accept="image/*">
              </div>
              <div class="card-body p-2">
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Title</label>
                  <input type="text" class="form-control form-control-sm blog-title" placeholder="Enter title" required>
                </div>
                <div class="mb-2">
                  <label class="form-label small text-muted mb-1">Content</label>
                  <textarea class="form-control form-control-sm blog-content" placeholder="Enter blog content" rows="3"></textarea>
                </div>
                <div class="form-check">
                  <input class="form-check-input blog-is-lead" type="checkbox" value="" id="isLead3">
                  <label class="form-check-label small text-muted" for="isLead3">
                    Featured Blog
                  </label>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="pt-3 mt-3 border-top">
          <div class="d-flex justify-content-end">
            <button type="submit" id="save-btn" class="btn btn-primary px-3 py-1 rounded-pill shadow-sm" style="font-size: 0.875rem;">
              <i class="bi bi-check-lg me-1"></i>Save Changes
            </button>
            <button type="button" id="saveChangesBtn" class="d-none">Hidden Backward Compatibility Button</button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  .hover-shadow-sm:hover {
    box-shadow: 0 .25rem .5rem rgba(0,0,0,.09) !important;
    transform: translateY(-2px);
  }
  .transition-all {
    transition: all 0.2s ease-in-out;
  }
  .object-fit-cover {
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
  .btn-delete-image {
    opacity: 0.85;
    transition: all 0.15s ease;
    background-color: #dc3545;
    border-color: #dc3545;
  }
  .btn-delete-image img {
    display: block;
    margin: auto;
    transition: all 0.15s ease;
  }
  .btn-delete-image:hover {
    opacity: 1;
    transform: scale(1.1);
    background-color: #dc3545;
    border-color: #dc3545;
  }
  .btn-delete-image:hover img {
    transform: rotate(5deg);
  }
  .loading-indicator {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 5;
    border-radius: 0.25rem;
  }
  .blog-card {
    margin-bottom: 1.5rem;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get content ID from the URL
    const contentId = new URLSearchParams(window.location.search).get('id') || '3d-text';
    
    console.log('Content ID:', contentId);
    
    // Initialize blog card functionality
    // No need to set up non-existent elements
    
    // Fetch content from API if we have a content ID
    // This is handled by the other event listener below
  });

  document.addEventListener('DOMContentLoaded', function() {
    // Check if we're on the blogs page
    if (window.location.pathname.includes('blogs')) {
      const blogForm = document.getElementById('blogForm');
      const saveBtn = document.getElementById('save-btn');
      const cardsContainer = document.getElementById('blog-cards-container');
      const blogCards = document.querySelectorAll('.blog-card');
      const addBlogBtn = document.getElementById('addBlogBtn');
      
      // Data storage
      let blogData = [];
      let contentId = new URLSearchParams(window.location.search).get('id');
      
      // Make sure contentId is available - this fixes the error
      if (!contentId) {
        console.warn('No content ID found in URL, using default value');
        contentId = '680693c1fed139cd60415c19'; // Default ID for blogs
      }
      
      // JWT Token for authorization
      const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTIyNTEyMSwiZXhwIjoxNzQ1MzExNTIxfQ.O1xfunWURBxt7tqcgXH_yWEyq-7VOA61LX6qrmEHXoA';
      
      // Add new blog function
      const addNewBlog = () => {
        // This is just a placeholder function
        // In a real application, you would add a new blog card to the interface
        showAlert('Add New Blog functionality not implemented yet', 'info');
      };
      
      // Set up event listeners
      if (addBlogBtn) {
        addBlogBtn.addEventListener('click', addNewBlog);
      }
      
      // Fetch content data from API
      const fetchContent = async () => {
        console.log('Fetching content with ID:', contentId);
        if (!contentId) {
          console.error('No content ID available');
          return;
        }
        
        try {
          const response = await fetch(`http://localhost:5000/api/content/id/${contentId}`, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          if (!response.ok) {
            throw new Error(`API error: ${response.status}`);
          }
          
          const data = await response.json();
          console.log('Fetched blog data:', data);
          
          // Initialize blog data array with default values
          blogData = [
            { title: '', content: '', image: { url: '' }, isLead: false },
            { title: '', content: '', image: { url: '' }, isLead: false },
            { title: '', content: '', image: { url: '' }, isLead: false },
            { title: '', content: '', image: { url: '' }, isLead: false }
          ];
          
          // Process fields from API response - using the new structure
          if (data.fields && Array.isArray(data.fields)) {
            data.fields.forEach((field, index) => {
              if (index < 4 && field.value) {
                // Set blog data from the field.value object
                blogData[index] = {
                  title: field.value.title || '',
                  content: field.value.content || '',
                  image: {
                    url: field.value.url || '',
                    alt: `Blog image ${index + 1}`
                  },
                  isLead: field.value.isLead || false
                };
              }
            });
          }
          
          // Update UI with fetched data
          updateBlogCards();
        } catch (error) {
          console.error('Error fetching content:', error);
          showAlert('Failed to load blog data. Please try again.', 'danger');
        }
      };
      
      // Update UI with blog data
      const updateBlogCards = () => {
        blogCards.forEach((card, index) => {
          const data = blogData[index];
          if (!data) return;
          
          const titleInput = card.querySelector('.blog-title');
          const contentInput = card.querySelector('.blog-content');
          const imageElement = card.querySelector('.blog-image');
          const isLeadCheckbox = card.querySelector('.blog-is-lead');
          
          titleInput.value = data.title || '';
          contentInput.value = data.content || '';
          
          if (isLeadCheckbox) {
            isLeadCheckbox.checked = data.isLead || false;
          }
          
          if (data.image && data.image.url) {
            imageElement.src = data.image.url;
            imageElement.alt = data.image.alt || `Blog image ${index + 1}`;
          }
        });
      };
      
      // Upload image to server
      const uploadImage = async (file, cardIndex) => {
        if (!file) return null;
        
        console.log(`Starting upload for card ${cardIndex}, file:`, file.name);
        
        // Get the card element
        const card = document.querySelector(`.blog-card[data-index="${cardIndex}"]`);
        if (!card) return null;
        
        // Get the image container
        const imageContainer = card.querySelector('.ratio');
        if (!imageContainer) return null;
        
        // Create and append loading indicator
        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'loading-indicator';
        loadingIndicator.innerHTML = '<div class="spinner-border text-light" role="status"><span class="visually-hidden">Uploading...</span></div>';
        imageContainer.appendChild(loadingIndicator);
        
        try {
          // Create FormData
          const formData = new FormData();
          formData.append('images', file);
          
          // Upload to server
          const response = await fetch('http://localhost:5000/api/images', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`
            },
            body: formData
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            console.error('Server upload response:', errorText);
            throw new Error('Failed to upload image: ' + response.statusText);
          }
          
          const data = await response.json();
          console.log('Upload response:', data);
          
          // Update image in UI
          if (data && data.files && data.files.length > 0) {
            const imageUrl = data.files[0].url;
            const imageElement = card.querySelector('.blog-image');
            if (imageElement) {
              imageElement.src = imageUrl;
            }
            
            // Update blog data
            blogData[cardIndex].image = {
              url: imageUrl,
              alt: `Blog image ${cardIndex + 1}`,
              width: 600,
              height: 350
            };
            
            console.log(`Image updated for card ${cardIndex}:`, blogData[cardIndex].image);
            return blogData[cardIndex].image;
          }
          
          return null;
        } catch (error) {
          console.error('Error uploading image:', error);
          showAlert(`Failed to upload image for blog ${cardIndex + 1}.`, 'danger');
          return null;
        } finally {
          // Remove loading indicator
          if (loadingIndicator.parentNode) {
            loadingIndicator.remove();
          }
        }
      };
      
      // Clear a blog card
      const clearBlogCard = (cardIndex) => {
        const card = document.querySelector(`.blog-card[data-index="${cardIndex}"]`);
        if (!card) return;
        
        const titleInput = card.querySelector('.blog-title');
        const contentInput = card.querySelector('.blog-content');
        const imageElement = card.querySelector('.blog-image');
        
        // Reset values
        titleInput.value = '';
        contentInput.value = '';
        imageElement.src = `https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg`;
        
        // Update blog data
        blogData[cardIndex] = {
          title: '',
          content: '',
          image: {
            url: `https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg`,
            alt: `Blog image ${cardIndex+1}`,
            width: 600,
            height: 350
          }
        };
        
        console.log(`Blog card ${cardIndex} cleared`);
        showAlert(`Blog post ${cardIndex + 1} has been cleared.`, 'info');
      };
      
      // Save all blog data
      const saveChanges = async () => {
        if (!contentId) {
          console.error('No content ID available for update');
          showAlert('Cannot save changes: Missing content ID.', 'warning');
          return;
        }
        
        // Update blog data from form inputs
        blogCards.forEach((card, index) => {
          const titleInput = card.querySelector('.blog-title');
          const contentInput = card.querySelector('.blog-content');
          const isLeadCheckbox = card.querySelector('.blog-is-lead');
          
          blogData[index].title = titleInput.value.trim();
          blogData[index].content = contentInput.value.trim();
          blogData[index].isLead = isLeadCheckbox ? isLeadCheckbox.checked : false;
        });
        
        // Prepare fields array according to the expected format with nested value objects
        const fields = [];
        
        for (let i = 0; i < 4; i++) {
          fields.push({
            value: {
              title: blogData[i].title,
              content: blogData[i].content,
              url: blogData[i].image.url,
              isLead: blogData[i].isLead
            },
            order: 0
          });
        }
        
        // Prepare data for API
        const updateData = {
          fields: fields,
          isActive: true
        };
        
        console.log('Saving blog data:', updateData);
        
        // Show loading state
        saveBtn.disabled = true;
        saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        try {
          // Send update request
          const response = await fetch(`http://localhost:5000/api/content/${contentId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(updateData)
          });
          
          if (!response.ok) {
            // Try to get the error details
            const errorText = await response.text();
            console.error('Server response:', errorText);
            throw new Error('Failed to save changes: ' + response.statusText);
          }
          
          const result = await response.json();
          console.log('Changes saved successfully:', result);
          
          // Show success message
          showAlert('Your blog posts have been saved successfully.', 'success');
        } catch (error) {
          console.error('Error saving blog data:', error);
          showAlert('Failed to save changes. Please try again.', 'danger');
        } finally {
          // Reset button
          saveBtn.disabled = false;
          saveBtn.innerHTML = '<i class="bi bi-check-lg me-1"></i>Save Changes';
        }
      };
      
      // Helper function to show alerts
      const showAlert = (message, type = 'success') => {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show py-2 px-3 mb-3`;
        alertDiv.style.fontSize = '0.875rem';
        alertDiv.innerHTML = `
          <strong>${type === 'success' ? 'Success!' : type === 'danger' ? 'Error!' : 'Note:'}</strong> ${message}
          <button type="button" class="btn-close btn-close-sm" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        
        // Add alert to the top of the card body
        const cardBody = document.querySelector('.card-body');
        cardBody.insertBefore(alertDiv, cardBody.firstChild);
        
        // Remove alert after 4 seconds
        setTimeout(() => {
          alertDiv.remove();
        }, 4000);
      };
      
      // Form submission
      blogForm.addEventListener('submit', function(e) {
        e.preventDefault();
        saveChanges();
      });
      
      // Replace image buttons
      document.querySelectorAll('.replace-image-btn').forEach(button => {
        button.addEventListener('click', function() {
          const card = this.closest('.blog-card');
          const fileInput = card.querySelector('.image-upload');
          fileInput.click();
        });
      });
      
      // Image upload event
      document.querySelectorAll('.image-upload').forEach(input => {
        input.addEventListener('change', function(e) {
          if (e.target.files && e.target.files[0]) {
            const card = this.closest('.blog-card');
            const cardIndex = parseInt(card.dataset.index);
            uploadImage(e.target.files[0], cardIndex);
          }
        });
      });
      
      // Delete buttons - Fixed to correctly target the new button class
      document.querySelectorAll('.btn-delete-image').forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          const card = this.closest('.blog-card');
          const cardIndex = parseInt(card.dataset.index);
          
          if (confirm(`Are you sure you want to clear blog post ${cardIndex + 1}?`)) {
            clearBlogCard(cardIndex);
          }
        });
      });
      
      // Set up event listeners for isLead checkboxes - allow only one to be selected
      document.querySelectorAll('.blog-is-lead').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          if (this.checked) {
            // Uncheck all other checkboxes
            document.querySelectorAll('.blog-is-lead').forEach(cb => {
              if (cb !== this) {
                cb.checked = false;
              }
            });
          }
        });
      });
      
      // Call fetchContent when the page loads
      fetchContent();
    }
  });
</script>
