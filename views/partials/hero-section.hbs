<div class="section-content">
  <h2 class="h4 mb-3">Ghibli Hero Configuration</h2>

  <div class="card border-0 shadow-lg overflow-hidden">
  <div class="card-body p-4">
    <!-- Header with subtle accent -->
    <div class="mb-4 pb-2 border-bottom">
      <h5 class="fw-semibold mb-0 text-primary">Banner Editor</h5>
      <p class="small text-muted mb-0">Customize your Studio Ghibli showcase</p>
    </div>

    <form class="needs-validation" novalidate>
      <!-- Title/Subtitle Group (Improved spacing + floating labels) -->
      <div class="row g-3 mb-4">
        <div class="col-md-6">
          <div class="form-floating">
            <input type="text" 
                   class="form-control" 
                   id="banner-title" 
                   value="Studio Ghibli Showcase"
                   placeholder="Title"
                   required>
            <label for="banner-title" class="text-muted">Title</label>
          </div>
        </div>
        <div class="col-md-6">
          <div class="form-floating">
            <input type="text" 
                   class="form-control" 
                   id="banner-subtitle" 
                   value="Explore the magical world"
                   placeholder="Subtitle">
            <label for="banner-subtitle" class="text-muted">Subtitle</label>
          </div>
        </div>
      </div>

      <!-- Image Gallery (Modern masonry grid + hover effects) -->
      <div class="mb-4">
        <label class="form-label small text-uppercase fw-semibold text-muted mb-2">Gallery</label>
        <div class="row g-3" id="image-preview-container">
          <!-- Image Cards with hover zoom -->
          <div class="col-6 col-md-4 col-lg-3">
            <div class="ratio ratio-1x1 rounded-3 overflow-hidden position-relative hover-zoom">
              <img src="https://res.cloudinary.com/dlzk6nqyg/image/upload/v1744960427/uploads/v3hohxrnlxwqttyiq5bm.jpg"
                   class="object-fit-cover"
                   alt="Ghibli Image">
               <button class="btn-remove-image btn btn-sm btn-danger position-absolute top-0 m-1 d-flex align-items-center justify-content-center">
                <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; object-fit: contain; padding: 5px;">
              </button>
            </div>
          </div>
          
          <!-- Add Image Card (Smaller and functional) -->
          <div class="col-6 col-md-4 col-lg-3">
            <div class="ratio ratio-1x1 rounded-3 bg-light border-2 border-dashed hover-shadow-lg cursor-pointer d-flex align-items-center justify-content-center transition-all" id="add-image-btn">
              <div class="text-center p-2">
                <i class="bi bi-plus-lg fs-5 text-primary"></i>
                <p class="small text-muted mb-0">Add Media</p>
              </div>
              <input type="file" id="media-upload" accept="image/*,video/*" class="d-none">
            </div>
          </div>
        </div>
      </div>

      <!-- Action Buttons (Sticky bottom with gradient) -->
      <div class="pt-4 mt-4 border-top">
        <div class="d-flex justify-content-end gap-3">
          <button type="button" class="btn btn-outline-secondary px-4 rounded-pill">Cancel</button>
          <button type="submit" class="btn btn-primary px-4 rounded-pill shadow-sm">
            <i class="bi bi-check-lg me-2"></i>Save Changes
          </button>
        </div>
      </div>
    </form>
  </div>
</div>

<style>
  .compact-form .form-control-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }
  .img-cover {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .hover-zoom:hover img {
    transform: scale(1.05);
    transition: transform 0.3s ease;
  }
  .border-dashed {
    border-style: dashed !important;
  }
  .transition-all {
    transition: all 0.2s ease;
  }
  .hover-shadow-lg:hover {
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.1);
  }

  /* Override Bootstrap's ratio positioning for buttons */
  .ratio .btn-remove-image,
  .ratio .remove-media-btn {
    position: absolute;
    left: auto !important; 
    top: 0;
    right: 0;
    width: 26px;
    height: 26px;
    z-index: 10;
  }
</style>

<script>
  // Only execute this code when hero-section is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Check if we're on the hero section page
    if (window.location.pathname.includes('hero-section')) {
      // Get content ID and category from the URL
      const urlParams = new URLSearchParams(window.location.search);
      
      // Get content ID from the link that was clicked
      const getContentId = () => {
        // Get from URL parameters
        if (urlParams.has('id')) {
          return urlParams.get('id');
        }
        
        // Fallback: check for data-content-id attribute (for backward compatibility)
        if (document.referrer.includes('/hero-section')) {
          const sidebarLink = document.querySelector('a[href="/hero-section"]');
          if (sidebarLink && sidebarLink.getAttribute('data-content-id')) {
            return sidebarLink.getAttribute('data-content-id');
          }
        }
        
        return null;
      };
      
      const contentId = getContentId();
      const category = urlParams.get('category');
      
      console.log('Content ID:', contentId);
      console.log('Category:', category);
      
      // Current media content holder
      let currentMedia = null;
      
      // Handle image upload functionality
      const addImageBtn = document.getElementById('add-image-btn');
      const mediaUpload = document.getElementById('media-upload');
      
      if (addImageBtn && mediaUpload) {
        // Trigger file input when add image button is clicked
        addImageBtn.addEventListener('click', function() {
          mediaUpload.click();
        });
        
        // Handle file selection
        mediaUpload.addEventListener('change', function(event) {
          const file = event.target.files[0];
          if (!file) return;
          
          // Check if file is an image or video
          const isImage = file.type.startsWith('image/');
          const isVideo = file.type.startsWith('video/');
          
          if (isImage || isVideo) {
            // Create object URL for preview
            const objectUrl = URL.createObjectURL(file);
            
            // Prepare media object
            currentMedia = {
              type: isVideo ? 'video' : 'image',
              file: file,
              url: objectUrl
            };
            
            // Update gallery with new media
            updateGallery(currentMedia);
            
            // In a real application, you would upload the file to your server here
            // For demo purposes, we're just displaying it locally
            console.log('File selected:', file);
            
            // Optional: Upload file to server immediately
            uploadMediaToServer(file, contentId).then(response => {
              if (response && response.url) {
                // Update the currentMedia with the server URL
                currentMedia.serverUrl = response.url;
                currentMedia.url = response.url; // Also update the main URL
                console.log('Media uploaded to server:', response);
              }
            });
          } else {
            alert('Please select an image or video file.');
          }
        });
      }
      
      // Only attempt to fetch if we have a content ID
      if (contentId) {
        fetch(`http://localhost:5000/api/content/id/${contentId}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok: ' + response.statusText);
          }
          return response.json();
        })
        .then(data => {
          console.log('API Response:', data);
          // You can handle the data here
          if (data && data.title) {
            document.getElementById('banner-title').value = data.title;
          }
          if (data && data.subtitle) {
            document.getElementById('banner-subtitle').value = data.subtitle;
          }
          // Store current media
          if (data && data.images && Array.isArray(data.images) && data.images.length > 0) {
            // Use the first image in the array
            currentMedia = data.images[0];
            updateGallery(currentMedia);
          }
        })
        .catch(error => {
          console.error('Error fetching data from API:', error);
        });
      } else {
        console.log('No content ID available for fetch request');
      }
      
      // Add event listener to Save Changes button
      const saveButton = document.querySelector('button[type="submit"]');
      if (saveButton) {
        // Prevent the default form submission
        document.querySelector('form.needs-validation').addEventListener('submit', function(e) {
          e.preventDefault();
        });
        
        saveButton.addEventListener('click', function() {
          updateContent(contentId, currentMedia);
        });
      }

      // Set up delete button for existing image
      const initialDeleteBtn = document.querySelector('.btn-remove-image');
      if (initialDeleteBtn) {
        initialDeleteBtn.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          
          // Find the parent image container
          const imageContainer = this.closest('.col-6');
          if (imageContainer) {
            // Remove the image element
            imageContainer.remove();
            
            // Also clear any stored media data
            currentMedia = null;
          }
        });
      }
    }
  });
  
  // Function to update content via API
  function updateContent(contentId, media) {
    if (!contentId) {
      console.error('No content ID available for update');
      return;
    }
    
    // Get values from form
    const title = document.getElementById('banner-title').value;
    const subtitle = document.getElementById('banner-subtitle').value;
    
    // Prepare data for API
    const updateData = {
      title: title,
      subtitle: subtitle,
      images: []
    };
    
    // Add media if available
    if (media) {
      // Use the Cloudinary URL if available, otherwise use the local URL
      const mediaUrl = media.serverUrl || media.url;
      
      // Create image object with structure matching MongoDB
      const imageObject = {
        url: mediaUrl,
        alt: title || "Hero image", // Use title as alt text, or default
        width: 1200, // Default width
        height: 800, // Default height
        order: 1 // First image
      };
      
      // Add to images array
      updateData.images = [imageObject];
      
      console.log('Saving image with data:', imageObject);
    }
    
    // Show loading state
    const saveButton = document.querySelector('button[type="submit"]');
    const originalButtonText = saveButton.innerHTML;
    saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
    saveButton.disabled = true;
    
    // JWT Token for authorization
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTIyNTEyMSwiZXhwIjoxNzQ1MzExNTIxfQ.O1xfunWURBxt7tqcgXH_yWEyq-7VOA61LX6qrmEHXoA';
    
    // Send update request
    fetch(`http://localhost:5000/api/content/${contentId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(updateData)
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Update failed: ' + response.statusText);
      }
      return response.json();
    })
    .then(data => {
      console.log('Update successful:', data);
      
      // Show success message
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-success alert-dismissible fade show';
      alertDiv.innerHTML = `
        <strong>Success!</strong> Your changes have been saved.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      document.querySelector('.card-body').prepend(alertDiv);
      
      // Remove alert after 3 seconds
      setTimeout(() => {
        alertDiv.remove();
      }, 3000);
    })
    .catch(error => {
      console.error('Error updating content:', error);
      
      // Show error message
      const alertDiv = document.createElement('div');
      alertDiv.className = 'alert alert-danger alert-dismissible fade show';
      alertDiv.innerHTML = `
        <strong>Error!</strong> Failed to save changes. Please try again.
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      document.querySelector('.card-body').prepend(alertDiv);
    })
    .finally(() => {
      // Restore button state
      saveButton.innerHTML = originalButtonText;
      saveButton.disabled = false;
    });
  }

  // Function to update the gallery with images from API
  function updateGallery(content) {
    const galleryContainer = document.getElementById('image-preview-container');
    if (!galleryContainer) return;
    
    // Remove all current media cards but keep the add button
    const addImageCard = document.getElementById('add-image-btn')?.closest('.col-6');
    
    // Find all media cards (not the add button)
    const mediaCards = Array.from(galleryContainer.querySelectorAll('.col-6')).filter(card => 
      !card.contains(document.getElementById('add-image-btn'))
    );
    
    // Remove all media cards
    mediaCards.forEach(card => card.remove());
    
    if (!content) return;
    
    // Create a card for the content (image or video)
    const mediaCard = document.createElement('div');
    mediaCard.className = 'col-6 col-md-4 col-lg-3';
    
    // Check if content is a video or image
    const isVideo = content.type === 'video' || 
                   (content.url && (content.url.endsWith('.mp4') || 
                                    content.url.endsWith('.webm') || 
                                    content.url.includes('youtube') || 
                                    content.url.includes('vimeo')));
    
    if (isVideo) {
      // Create video element
      mediaCard.innerHTML = `
        <div class="ratio ratio-1x1 rounded-3 overflow-hidden position-relative hover-zoom">
          ${content.url.includes('youtube') || content.url.includes('vimeo') 
            ? `<iframe src="${content.url}" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>`
            : `<video src="${content.url}" class="object-fit-cover" controls></video>`
          }
          <button class="remove-media-btn btn btn-sm btn-danger position-absolute top-0 m-1 d-flex align-items-center justify-content-center">
            <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; padding: 5px;">
          </button>
        </div>
      `;
    } else {
      // Create image element (default)
      mediaCard.innerHTML = `
        <div class="ratio ratio-1x1 rounded-3 overflow-hidden position-relative hover-zoom">
          <img src="${content.url || content}" class="object-fit-cover" alt="Media Content">
          <button class="remove-media-btn btn btn-sm btn-danger position-absolute top-0 m-1 d-flex align-items-center justify-content-center">
            <img src="/img/delete.svg" alt="Delete" style="width: 28px; height: 28px; padding: 5px;">
          </button>
        </div>
      `;
    }
    
    // Insert the media card before the add button
    if (addImageCard && addImageCard.parentNode) {
      galleryContainer.insertBefore(mediaCard, addImageCard);
    } else {
      // If add button wasn't found, just append
      galleryContainer.appendChild(mediaCard);
    }
    
    // Add click event for remove button
    const removeButton = mediaCard.querySelector('.remove-media-btn');
    if (removeButton) {
      removeButton.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        // Remove the card
        mediaCard.remove();
        
        // Clear current media reference
        window.currentMedia = null;
        currentMedia = null;
      });
    }
  }

  // Function to upload media to server
  async function uploadMediaToServer(file, contentId) {
    if (!file) return null;
    
    // JWT Token for authorization
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTEzMDA2MywiZXhwIjoxNzQ1MjE2NDYzfQ.X7iaXBMdl1dYL15owKDCHzaWQpmtD_b74askqD5vasw';
    
    // Create FormData
    const formData = new FormData();
    formData.append('images', file);
    
    try {
      // Show loading indicator
      const loadingIndicator = document.createElement('div');
      loadingIndicator.className = 'position-absolute bg-dark bg-opacity-50 w-100 h-100 d-flex align-items-center justify-content-center text-white';
      loadingIndicator.style.zIndex = '10';
      loadingIndicator.innerHTML = '<div class="spinner-border text-light" role="status"><span class="visually-hidden">Uploading...</span></div>';
      
      // Add loading indicator to the media card
      const mediaCard = document.querySelector('.ratio.ratio-1x1');
      if (mediaCard) {
        mediaCard.style.position = 'relative';
        mediaCard.appendChild(loadingIndicator);
      }
      
      // Upload the image to Cloudinary via your endpoint
      const response = await fetch('http://localhost:5000/api/images', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        },
        body: formData
      });
      
      if (!response.ok) {
        throw new Error('Upload failed: ' + response.statusText);
      }
      
      const data = await response.json();
      
        console.log(data, 'data');
      // Remove loading indicator
      if (loadingIndicator) {
        loadingIndicator.remove();
      }
      
      // Return the Cloudinary URL
      if (data && data.files) {
        // Replace the local object URL with the Cloudinary URL
        const image = document.querySelector('.ratio.ratio-1x1 img');
        if (image) {
          image.src = data.files[0].url;
        }
        
        // Update the current media object
        return {
          url: data.files[0].url,
          alt: "Uploaded image",
          width: 1200,
          height: 800,
          order: 1,
          type: file.type.startsWith('video/') ? 'video' : 'image'
        };
      }
      
      return null;
    } catch (error) {
      console.error('Error uploading to Cloudinary:', error);
      
      // Remove loading indicator if it exists
      const loadingIndicator = document.querySelector('.position-absolute.bg-dark.bg-opacity-50');
      if (loadingIndicator) {
        loadingIndicator.remove();
      }
      
      // Show error alert
      alert('Failed to upload image. Please try again.');
      return null;
    }
  }
</script>