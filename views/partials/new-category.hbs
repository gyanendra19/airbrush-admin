<!-- New Category Form -->
<div class="card shadow-sm border-0 mb-4">
  <div class="card-header bg-white py-3">
    <h5 class="card-title mb-0 fw-semibold">Create New Category</h5>
  </div>
  <div class="card-body">
    <form id="newCategoryForm" class="needs-validation" novalidate>
      <div class="mb-3">
        <label for="categoryName" class="form-label">Category Name</label>
        <input type="text" class="form-control" id="categoryName" name="categoryName" 
               placeholder="Enter category name" required>
        <div class="invalid-feedback">
          Please provide a category name.
        </div>
      </div>
          
      <div class="mb-3">
        <label for="categoryDescription" class="form-label">Description</label>
        <textarea class="form-control" id="categoryDescription" name="categoryDescription" 
                  rows="3" placeholder="Enter category description" required></textarea>
        <div class="invalid-feedback">
          Please provide a category description.
        </div>
      </div>

      <div class="mb-3">
        <label for="categoryImage" class="form-label">Category Image</label>
        <input type="file" class="form-control" id="categoryImage" name="categoryImage" 
               accept="image/*" required>
        <div class="form-text">
          Recommended size: 1200x600px. Max file size: 2MB.
        </div>
        <div class="invalid-feedback">
          Please select a category image.
        </div>
        <div class="image-preview bg-light rounded overflow-hidden mt-2" style="width: 200px; height: 200px;">
          <div class="d-flex align-items-center justify-content-center text-muted h-100">
            <i class="bi bi-image me-2"></i> No image selected
          </div>
        </div>
      </div>
      
      <div class="d-grid gap-2">
        <button type="submit" class="btn btn-primary">
          <i class="bi bi-plus-circle me-2"></i> Create Category
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Section Forms - Initially Hidden -->
<div id="sectionForms" class="d-none">
  <!-- Tabs for Different Section Types -->
  <ul class="nav nav-tabs mb-4" id="sectionTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="hero-tab" data-bs-toggle="tab" data-bs-target="#hero" type="button" role="tab">
        Hero Section
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="gallery-tab" data-bs-toggle="tab" data-bs-target="#gallery" type="button" role="tab">
        Images Gallery
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="why-tab" data-bs-toggle="tab" data-bs-target="#why" type="button" role="tab">
        Why Use Tool
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="text-to-anything-tab" data-bs-toggle="tab" data-bs-target="#text-to-anything" type="button" role="tab">
        Text to Anything
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="blogs-tab" data-bs-toggle="tab" data-bs-target="#blogs" type="button" role="tab">
        Blogs
      </button>
    </li>
  </ul>

  <!-- Tab Content -->
  <div class="tab-content" id="sectionTabsContent">
    <!-- Hero Section Tab -->
    <div class="tab-pane fade show active" id="hero" role="tabpanel" aria-labelledby="hero-tab">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Hero Section</h5>
          <span class="badge bg-primary">Required</span>
        </div>
        <div class="card-body">
          <form id="heroSectionForm" class="needs-validation" novalidate>
            <input type="hidden" id="categoryId" name="categoryId">
            <input type="hidden" id="sectionType" name="sectionType" value="hero-section">
            
            <div class="mb-3">
              <label for="heroTitle" class="form-label">Title</label>
              <input type="text" class="form-control" id="heroTitle" name="title" 
                    placeholder="Enter hero section title" required>
              <div class="invalid-feedback">
                Please provide a title.
              </div>
            </div>
            
            <div class="mb-3">
              <label for="heroDescription" class="form-label">Description</label>
              <textarea class="form-control" id="heroDescription" name="description" 
                       rows="3" placeholder="Enter description" required></textarea>
              <div class="invalid-feedback">
                Please provide a description.
              </div>
            </div>
            
            <div class="mb-3">
              <label for="heroImage" class="form-label">Background Image</label>
              <input type="file" class="form-control" id="heroImage" name="image" accept="image/*" required>
              <div class="form-text">
                Recommended size: 1920x1080px. Max file size: 2MB.
              </div>
              <div class="invalid-feedback">
                Please select an image.
              </div>
              <div class="image-preview bg-light rounded overflow-hidden mt-2" style="width: 200px; height: 200px;">
                <div class="d-flex align-items-center justify-content-center text-muted h-100">
                  <i class="bi bi-image me-2"></i> No image selected
                </div>
              </div>
            </div>
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Hero Section
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Images Gallery Tab (placeholder) -->
    <div class="tab-pane fade" id="gallery" role="tabpanel" aria-labelledby="gallery-tab">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Images Gallery</h5>
          <span class="badge bg-info">Optional</span>
        </div>
        <div class="card-body">
          <form id="galleryForm" class="needs-validation" novalidate>
            <input type="hidden" id="galleryCategory" name="categoryId">
            <input type="hidden" id="galleryType" name="sectionType" value="images-gallery">
            
            <!-- Gallery Title and Description -->
            <div class="mb-4">
              <div class="mb-3">
                <label for="galleryTitle" class="form-label">Gallery Title</label>
                <input type="text" class="form-control" id="galleryTitle" name="title" 
                      placeholder="Enter gallery title" required>
                <div class="invalid-feedback">
                  Please provide a gallery title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="galleryDescription" class="form-label">Gallery Description</label>
                <textarea class="form-control" id="galleryDescription" name="description" 
                         rows="2" placeholder="Enter gallery description" required></textarea>
                <div class="invalid-feedback">
                  Please provide a gallery description.
                </div>
              </div>
            </div>
            
            <!-- Gallery Images Container -->
            <div class="mb-4 border rounded-3 p-3 bg-light">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <label class="form-label mb-0 fw-semibold">Gallery Images</label>
                <button type="button" id="addGalleryImage" class="btn btn-sm btn-primary">
                  <i class="bi bi-plus-lg me-1"></i> Add Image
                </button>
              </div>
              
              <!-- Gallery Images Repeater -->
              <div id="galleryImagesContainer">
                <!-- Single Image Item Template -->
                <div class="gallery-image-item mb-4 border rounded p-3 bg-white position-relative">
                  <button type="button" class="btn-close position-absolute top-0 end-0 m-2 remove-gallery-image" 
                         aria-label="Remove image"></button>
                  
                  <div class="row g-3">
                    <!-- Image Upload -->
                    <div class="col-md-4">
                      <div class="mb-3">
                        <label class="form-label small">Upload Image</label>
                        <input type="file" class="form-control form-control-sm gallery-image-upload" 
                               accept="image/*" required>
                        <div class="invalid-feedback">
                          Please select an image.
                        </div>
                      </div>
                      <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mb-2">
                        <div class="d-flex align-items-center justify-content-center text-muted">
                          <i class="bi bi-image me-2"></i> No image
                        </div>
                      </div>
                    </div>
                    
                    <!-- Image Details -->
                    <div class="col-md-8">
                      <div class="mb-3">
                        <label class="form-label small">Image Title</label>
                        <input type="text" class="form-control form-control-sm gallery-image-title" 
                               placeholder="Enter image title" required>
                        <div class="invalid-feedback">
                          Please provide an image title.
                        </div>
                      </div>
                      
                      <div class="mb-3">
                        <label class="form-label small">Image Description</label>
                        <textarea class="form-control form-control-sm gallery-image-description" rows="2"
                                  placeholder="Enter image description" required></textarea>
                        <div class="invalid-feedback">
                          Please provide an image description.
                        </div>
                      </div>

                      <div class="mb-3">
                        <label class="form-label small">Image Prompt</label>
                        <textarea class="form-control form-control-sm gallery-image-prompt" rows="2"
                                  placeholder="Enter image generation prompt"></textarea>
                        <div class="form-text">
                          Optional: The prompt used to generate this image
                        </div>
                      </div>
                      
                      <div class="form-check form-switch">
                        <input class="form-check-input gallery-image-featured" type="checkbox" role="switch">
                        <label class="form-check-label small">Featured Image</label>
                      </div>
                    </div>
                  </div>
                </div>
                <!-- End Single Image Item -->
              </div>
              
              <!-- No Images Message -->
              <div id="noGalleryImages" class="text-center py-4 text-muted">
                <i class="bi bi-images fs-3 d-block mb-2"></i>
                <p class="mb-0">No images added yet. Click "Add Image" to get started.</p>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Gallery
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Why Use Tool Tab -->
    <div class="tab-pane fade" id="why" role="tabpanel" aria-labelledby="why-tab">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Why Use Tool</h5>
          <span class="badge bg-info">Optional</span>
        </div>
        <div class="card-body">
          <form id="whyUseToolForm" class="needs-validation" novalidate>
            <input type="hidden" id="whyUseToolCategory" name="categoryId">
            <input type="hidden" id="whyUseToolType" name="sectionType" value="why-use-tool">
            
            <!-- Main Title and Description -->
            <div class="mb-4">
              <div class="mb-3">
                <label for="whyUseToolTitle" class="form-label">Section Title</label>
                <input type="text" class="form-control" id="whyUseToolTitle" name="title" 
                      placeholder="Enter section title" required>
                <div class="invalid-feedback">
                  Please provide a section title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="whyUseToolDescription" class="form-label">Section Description</label>
                <textarea class="form-control" id="whyUseToolDescription" name="description" 
                         rows="2" placeholder="Enter section description" required></textarea>
                <div class="invalid-feedback">
                  Please provide a section description.
                </div>
              </div>
            </div>
            
            <!-- Feature Image -->
            <div class="mb-4 p-3 bg-light rounded-3 border">
              <label class="form-label fw-semibold mb-3">Feature Image</label>
              <div class="row">
                <div class="col-lg-4">
                  <div class="mb-3">
                    <input type="file" class="form-control" id="whyUseToolImage" name="image" 
                           accept="image/*" required>
                    <div class="invalid-feedback">
                      Please select an image.
                    </div>
                    <div class="form-text mt-1">
                      Recommended size: 600x400px or larger
                    </div>
                  </div>
                </div>
                <div class="col-lg-8">
                  <div id="whyUseToolImagePreview" class="ratio ratio-16x9 bg-white rounded overflow-hidden border">
                    <div class="d-flex align-items-center justify-content-center text-muted">
                      <i class="bi bi-image fs-3 me-2"></i> 
                      <span>Preview will appear here</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Feature Points -->
            <div class="mb-4 p-3 bg-light rounded-3 border">
              <label class="form-label fw-semibold mb-3">Feature Points</label>
              
              <!-- Feature 1 -->
              <div class="mb-3">
                <div class="input-group">
                  <span class="input-group-text bg-primary text-white">1</span>
                  <input type="text" class="form-control" id="whyUseToolFeature1" 
                         placeholder="Enter first feature point" required>
                  <div class="invalid-feedback">
                    Please provide the first feature point.
                  </div>
                </div>
              </div>
              
              <!-- Feature 2 -->
              <div class="mb-3">
                <div class="input-group">
                  <span class="input-group-text bg-primary text-white">2</span>
                  <input type="text" class="form-control" id="whyUseToolFeature2" 
                         placeholder="Enter second feature point" required>
                  <div class="invalid-feedback">
                    Please provide the second feature point.
                  </div>
                </div>
              </div>
              
              <!-- Feature 3 -->
              <div class="mb-3">
                <div class="input-group">
                  <span class="input-group-text bg-primary text-white">3</span>
                  <input type="text" class="form-control" id="whyUseToolFeature3" 
                         placeholder="Enter third feature point" required>
                  <div class="invalid-feedback">
                    Please provide the third feature point.
                  </div>
                </div>
              </div>
              
              <!-- Feature 4 -->
              <div class="mb-3">
                <div class="input-group">
                  <span class="input-group-text bg-primary text-white">4</span>
                  <input type="text" class="form-control" id="whyUseToolFeature4" 
                         placeholder="Enter fourth feature point" required>
                  <div class="invalid-feedback">
                    Please provide the fourth feature point.
                  </div>
                </div>
              </div>
              
              <!-- Feature 5 (Optional) -->
              <div class="mb-1">
                <div class="input-group">
                  <span class="input-group-text bg-secondary text-white">5</span>
                  <input type="text" class="form-control" id="whyUseToolFeature5" 
                         placeholder="Enter fifth feature point (optional)">
                </div>
                <div class="form-text mt-1">
                  This feature point is optional.
                </div>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Why Use Tool Section
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Text to Anything Tab -->
    <div class="tab-pane fade" id="text-to-anything" role="tabpanel" aria-labelledby="text-to-anything-tab">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Text to Anything</h5>
          <span class="badge bg-info">Optional</span>
        </div>
        <div class="card-body">
          <form id="textToAnythingForm" class="needs-validation" novalidate>
            <input type="hidden" id="textToAnythingCategory" name="categoryId">
            <input type="hidden" id="textToAnythingType" name="sectionType" value="text-to-anything">
            
            <!-- Main Title and Subtitle -->
            <div class="mb-4">
              <div class="mb-3">
                <label for="textToAnythingTitle" class="form-label">Title</label>
                <input type="text" class="form-control" id="textToAnythingTitle" name="title" 
                      placeholder="Enter section title" required>
                <div class="invalid-feedback">
                  Please provide a section title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="textToAnythingSubtitle" class="form-label">Subtitle</label>
                <input type="text" class="form-control" id="textToAnythingSubtitle" name="subtitle"
                       placeholder="Enter section subtitle" required>
                <div class="invalid-feedback">
                  Please provide a section subtitle.
                </div>
              </div>
            </div>
            
            <!-- Section Images -->
            <div class="mb-4 p-3 bg-light rounded-3 border">
              <label class="form-label fw-semibold mb-3">
                Section Images 
                <span class="text-muted small fw-normal">(Main banner and examples)</span>
              </label>
              
              <!-- Main Banner Image -->
              <div class="mb-4 pb-3 border-bottom">
                <label class="form-label small text-uppercase fw-semibold text-primary mb-2">Main Banner Image</label>
                <div class="row g-3">
                  <div class="col-lg-4">
                    <div class="mb-3">
                      <input type="file" class="form-control" id="textToAnythingMainImage" name="mainImage" 
                             accept="image/*" required>
                      <div class="invalid-feedback">
                        Please select a main banner image.
                      </div>
                      <div class="form-text mt-1">
                        Recommended size: 1200x600px
                      </div>
                    </div>
                  </div>
                  <div class="col-lg-8">
                    <div id="textToAnythingMainImagePreview" class="ratio ratio-21x9 bg-white rounded overflow-hidden border">
                      <div class="d-flex align-items-center justify-content-center text-muted">
                        <i class="bi bi-image fs-3 me-2"></i> 
                        <span>Banner preview will appear here</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Example Images -->
              <div>
                <label class="form-label small text-uppercase fw-semibold text-primary mb-2">Example Images (Optional)</label>
                <div class="row g-3 mb-3" id="textToAnythingExampleImages">
                  <div class="col-6 col-md-3">
                    <div class="card h-100 border">
                      <div class="card-body p-2 text-center">
                        <div class="btn btn-light border w-100 rounded-3 mb-2 text-center py-4" id="addExampleImageBtn">
                          <i class="bi bi-plus-lg d-block fs-4 mb-1"></i>
                          <span class="small text-muted">Add Example</span>
                        </div>
                        <input type="file" id="exampleImageUpload" class="d-none" accept="image/*" multiple>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="form-text mt-1">
                  You can add up to 8 example images to showcase the capabilities.
                </div>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Text to Anything Section
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Blogs Tab -->
    <div class="tab-pane fade" id="blogs" role="tabpanel" aria-labelledby="blogs-tab">
      <div class="card shadow-sm border-0 mb-4">
        <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0 fw-semibold">Blog Section</h5>
          <span class="badge bg-info">Optional</span>
        </div>
        <div class="card-body">
          <form id="blogsForm" class="needs-validation" novalidate>
            <input type="hidden" id="blogsCategory" name="categoryId">
            <input type="hidden" id="blogsType" name="sectionType" value="blogs">
            
            <!-- Section Title and Description -->
            <div class="mb-4">
              <div class="mb-3">
                <label for="blogsTitle" class="form-label">Section Title</label>
                <input type="text" class="form-control" id="blogsTitle" name="title" 
                      placeholder="Enter blog section title" required>
                <div class="invalid-feedback">
                  Please provide a section title.
                </div>
              </div>
              
              <div class="mb-3">
                <label for="blogsDescription" class="form-label">Section Description</label>
                <textarea class="form-control" id="blogsDescription" name="description" 
                         rows="2" placeholder="Enter section description" required></textarea>
                <div class="invalid-feedback">
                  Please provide a section description.
                </div>
              </div>
            </div>
            
            <!-- Blog Entries -->
            <div class="mb-4">
              <h6 class="fw-semibold border-bottom pb-2 mb-3">Blog Entries</h6>
              
              <!-- Blog Entries Container -->
              <div id="blogEntriesContainer">
                <!-- Blog Entry 1 -->
                <div class="blog-entry card shadow-sm border mb-4">
                  <div class="card-header bg-white py-2 d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-semibold">Blog 1</h6>
                    <div class="form-check form-switch">
                      <input class="form-check-input blog-lead-toggle" type="checkbox" id="blog1Lead" checked>
                      <label class="form-check-label small" for="blog1Lead">Lead Blog</label>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <!-- Blog Image -->
                      <div class="col-md-4 mb-3 mb-md-0">
                        <label class="form-label small">Blog Image</label>
                        <input type="file" class="form-control form-control-sm blog-image-upload" 
                               accept="image/*" required>
                        <div class="invalid-feedback">
                          Please select a blog image.
                        </div>
                        <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mt-2">
                          <div class="d-flex align-items-center justify-content-center text-muted">
                            <i class="bi bi-image me-2"></i> No image
                          </div>
                        </div>
                      </div>
                      
                      <!-- Blog Details -->
                      <div class="col-md-8">
                        <div class="mb-3">
                          <label class="form-label small">Blog Title</label>
                          <input type="text" class="form-control form-control-sm blog-title" 
                                 placeholder="Enter blog title" required>
                          <div class="invalid-feedback">
                            Please provide a blog title.
                          </div>
                        </div>
                        
                        <div class="mb-0">
                          <label class="form-label small">Publication Date</label>
                          <input type="date" class="form-control form-control-sm blog-date" required>
                          <div class="invalid-feedback">
                            Please provide a publication date.
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Blog Entry 2 -->
                <div class="blog-entry card shadow-sm border mb-4">
                  <div class="card-header bg-white py-2 d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-semibold">Blog 2</h6>
                    <div class="form-check form-switch">
                      <input class="form-check-input blog-lead-toggle" type="checkbox" id="blog2Lead">
                      <label class="form-check-label small" for="blog2Lead">Lead Blog</label>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <!-- Blog Image -->
                      <div class="col-md-4 mb-3 mb-md-0">
                        <label class="form-label small">Blog Image</label>
                        <input type="file" class="form-control form-control-sm blog-image-upload" 
                               accept="image/*" required>
                        <div class="invalid-feedback">
                          Please select a blog image.
                        </div>
                        <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mt-2">
                          <div class="d-flex align-items-center justify-content-center text-muted">
                            <i class="bi bi-image me-2"></i> No image
                          </div>
                        </div>
                      </div>
                      
                      <!-- Blog Details -->
                      <div class="col-md-8">
                        <div class="mb-3">
                          <label class="form-label small">Blog Title</label>
                          <input type="text" class="form-control form-control-sm blog-title" 
                                 placeholder="Enter blog title" required>
                          <div class="invalid-feedback">
                            Please provide a blog title.
                          </div>
                        </div>
                        
                        <div class="mb-0">
                          <label class="form-label small">Publication Date</label>
                          <input type="date" class="form-control form-control-sm blog-date" required>
                          <div class="invalid-feedback">
                            Please provide a publication date.
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Blog Entry 3 -->
                <div class="blog-entry card shadow-sm border mb-4">
                  <div class="card-header bg-white py-2 d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-semibold">Blog 3</h6>
                    <div class="form-check form-switch">
                      <input class="form-check-input blog-lead-toggle" type="checkbox" id="blog3Lead">
                      <label class="form-check-label small" for="blog3Lead">Lead Blog</label>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <!-- Blog Image -->
                      <div class="col-md-4 mb-3 mb-md-0">
                        <label class="form-label small">Blog Image</label>
                        <input type="file" class="form-control form-control-sm blog-image-upload" 
                               accept="image/*" required>
                        <div class="invalid-feedback">
                          Please select a blog image.
                        </div>
                        <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mt-2">
                          <div class="d-flex align-items-center justify-content-center text-muted">
                            <i class="bi bi-image me-2"></i> No image
                          </div>
                        </div>
                      </div>
                      
                      <!-- Blog Details -->
                      <div class="col-md-8">
                        <div class="mb-3">
                          <label class="form-label small">Blog Title</label>
                          <input type="text" class="form-control form-control-sm blog-title" 
                                 placeholder="Enter blog title" required>
                          <div class="invalid-feedback">
                            Please provide a blog title.
                          </div>
                        </div>
                        
                        <div class="mb-0">
                          <label class="form-label small">Publication Date</label>
                          <input type="date" class="form-control form-control-sm blog-date" required>
                          <div class="invalid-feedback">
                            Please provide a publication date.
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Blog Entry 4 -->
                <div class="blog-entry card shadow-sm border mb-4">
                  <div class="card-header bg-white py-2 d-flex justify-content-between align-items-center">
                    <h6 class="mb-0 fw-semibold">Blog 4</h6>
                    <div class="form-check form-switch">
                      <input class="form-check-input blog-lead-toggle" type="checkbox" id="blog4Lead">
                      <label class="form-check-label small" for="blog4Lead">Lead Blog</label>
                    </div>
                  </div>
                  <div class="card-body">
                    <div class="row">
                      <!-- Blog Image -->
                      <div class="col-md-4 mb-3 mb-md-0">
                        <label class="form-label small">Blog Image</label>
                        <input type="file" class="form-control form-control-sm blog-image-upload" 
                               accept="image/*" required>
                        <div class="invalid-feedback">
                          Please select a blog image.
                        </div>
                        <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mt-2">
                          <div class="d-flex align-items-center justify-content-center text-muted">
                            <i class="bi bi-image me-2"></i> No image
                          </div>
                        </div>
                      </div>
                      
                      <!-- Blog Details -->
                      <div class="col-md-8">
                        <div class="mb-3">
                          <label class="form-label small">Blog Title</label>
                          <input type="text" class="form-control form-control-sm blog-title" 
                                 placeholder="Enter blog title" required>
                          <div class="invalid-feedback">
                            Please provide a blog title.
                          </div>
                        </div>
                        
                        <div class="mb-0">
                          <label class="form-label small">Publication Date</label>
                          <input type="date" class="form-control form-control-sm blog-date" required>
                          <div class="invalid-feedback">
                            Please provide a publication date.
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="bi bi-save me-2"></i> Save Blog Section
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add alert container at the end of the body -->
<div class="alert-container position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
  <div id="categorySuccessAlert" class="alert alert-success d-flex align-items-center mb-0 d-none">
    <i class="bi bi-check-circle-fill me-2"></i>
    <div>
      <strong>Category created successfully!</strong>
      <p class="mb-0">You can now add sections to your category.</p>
    </div>
  </div>
</div>

<style>
  /* ... existing styles ... */

  /* Alert container styles */
  .alert-container {
    min-width: 300px;
    max-width: 500px;
  }

  .alert-container .alert {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideIn 0.3s ease-out;
    margin-bottom: 0;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // API Configuration
    const API_CONFIG = {
      BASE_URL: 'http://localhost:5000', // Change this to your actual backend URL
      ENDPOINTS: {
        IMAGES: '/api/images',
        CATEGORIES: '/api/categories',
        SECTIONS: '/api/sections',
        CONTENT: '/api/content'
      }
    };

    const categoryForm = document.getElementById('newCategoryForm');
    const sectionForms = document.getElementById('sectionForms');
    let createdCategoryId = null;
    
    // Add Bootstrap tab event handlers
    const tabList = document.querySelectorAll('button[data-bs-toggle="tab"]');
    tabList.forEach(tabEl => {
      tabEl.addEventListener('shown.bs.tab', event => {
        const targetTab = event.target.getAttribute('data-bs-target');
        console.log('Tab activated:', targetTab);
        
        // Set category ID on all forms when tabs change
        if (createdCategoryId) {
          document.querySelectorAll('input[name="categoryId"]').forEach(input => {
            input.value = createdCategoryId;
          });
        }
      });
    });
    
    // Initialize tab activation events
    const tabElements = document.querySelectorAll('button[data-bs-toggle="tab"]');
    console.log('Found tab elements:', tabElements.length);
    
    // Add event listener to the gallery tab content
    const galleryTabContent = document.getElementById('gallery');
    if (galleryTabContent) {
      console.log('Gallery tab content found');
      
      // Add event listener for when the tab content becomes visible
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const isActive = galleryTabContent.classList.contains('show');
            console.log('Gallery tab content visibility changed:', isActive);
            
            if (isActive) {
              // Get content ID from URL
              const urlParams = new URLSearchParams(window.location.search);
              const contentId = urlParams.get('id');
              console.log('Content ID from URL:', contentId);
              
              if (contentId) {
                console.log('Fetching gallery content for ID:', contentId);
                fetchGalleryContent(contentId);
              }
            }
          }
      });
    });
      
      // Start observing the gallery tab content
      observer.observe(galleryTabContent, {
        attributes: true,
        attributeFilter: ['class']
      });
    } else {
      console.error('Gallery tab content not found!');
    }

    // Also add direct click handler for gallery tab
    const galleryTab = document.getElementById('gallery-tab');
    if (galleryTab) {
      console.log('Gallery tab button found');
      
      galleryTab.addEventListener('click', function() {
        console.log('Gallery tab clicked');
        
        // Get content ID from URL
        const urlParams = new URLSearchParams(window.location.search);
        const contentId = urlParams.get('id');
        console.log('Content ID from URL (click):', contentId);
        
        if (contentId) {
          console.log('Fetching gallery content for ID (click):', contentId);
          fetchGalleryContent(contentId);
        }
      });
    }
    
    // Function to initialize image previews for a specific tab
    function initializeImagePreviews(tabId) {
      let fileInputs = [];
      
      // Select the appropriate file inputs based on the active tab
      switch(tabId) {
        case '#hero':
          fileInputs = document.querySelectorAll('#hero .form-control[type="file"]');
          break;
        case '#gallery':
          fileInputs = document.querySelectorAll('#gallery .form-control[type="file"]');
          break;
        case '#why':
          fileInputs = document.querySelectorAll('#why .form-control[type="file"]');
          break;
        case '#text-to-anything':
          fileInputs = document.querySelectorAll('#text-to-anything .form-control[type="file"]');
          break;
        case '#blogs':
          fileInputs = document.querySelectorAll('#blogs .form-control[type="file"]');
          break;
        default:
          return;
      }
      
      // Add change event listeners to file inputs
      fileInputs.forEach(input => {
        // Remove existing event listeners to avoid duplicates
        const newInput = input.cloneNode(true);
        input.parentNode.replaceChild(newInput, input);
        
        // Add new event listener
        newInput.addEventListener('change', function(event) {
          const file = this.files[0];
          if (!file) return;
          
          // Find the closest preview container
          let previewContainer;
          if (this.closest('.col-md-4')) {
            previewContainer = this.closest('.col-md-4').querySelector('.image-preview');
          } else if (this.closest('.mb-3')) {
            previewContainer = this.closest('.mb-3').nextElementSibling;
          }
          
          if (previewContainer) {
            const objectUrl = URL.createObjectURL(file);
            previewContainer.innerHTML = `<img src="${objectUrl}" class="w-100 h-100 object-fit-cover" alt="Image Preview">`;
          }
        });
      });
      
      // Re-initialize tab-specific functionality
      if (tabId === '#gallery') {
        const addGalleryImageBtn = document.getElementById('addGalleryImage');
        if (addGalleryImageBtn) {
          // Remove existing event listener
          const newBtn = addGalleryImageBtn.cloneNode(true);
          addGalleryImageBtn.parentNode.replaceChild(newBtn, addGalleryImageBtn);
          
          // Add new event listener
          newBtn.addEventListener('click', function() {
            addGalleryImageItem();
          });
        }
      } else if (tabId === '#blogs') {
        // Reinitialize lead blog toggles
        const blogLeadToggles = document.querySelectorAll('#blogs .blog-lead-toggle');
        blogLeadToggles.forEach(toggle => {
          // Remove existing event listener
          const newToggle = toggle.cloneNode(true);
          toggle.parentNode.replaceChild(newToggle, toggle);
          
          // Add new event listener
          newToggle.addEventListener('change', function() {
            if (this.checked) {
              blogLeadToggles.forEach(otherToggle => {
                if (otherToggle !== this && otherToggle.id !== this.id) {
                  otherToggle.checked = false;
                }
              });
            }
          });
        });
      }
    }
    
    // Function to switch tabs using Bootstrap's API
    function switchToTab(tabId) {
      console.log('=== Tab Switching Debug ===');
      console.log('Attempting to switch to tab:', tabId);
      
      // Get the tab button
      const tabButton = document.querySelector(`[data-bs-target="${tabId}"]`);
      if (!tabButton) {
        console.error('Tab button not found:', tabId);
        return;
      }
      
      // Create a new Bootstrap Tab instance
      const tab = new bootstrap.Tab(tabButton);
      
      // Show the tab
      tab.show();
      
      console.log('Tab switch completed');
    }

    // Function to switch from hero to gallery section
    function switchHeroToGallery() {
      console.log('Switching from hero to gallery section...');
      
      // Get the gallery tab and content
      const galleryTab = document.getElementById('gallery-tab');
      const galleryContent = document.getElementById('gallery');
      const heroTab = document.getElementById('hero-tab');
      const heroContent = document.getElementById('hero');
      
      if (galleryTab && galleryContent && heroTab && heroContent) {
        // Remove active classes from hero tab
        heroTab.classList.remove('active');
        heroContent.classList.remove('show', 'active');
        
        // Add active classes to gallery tab
        galleryTab.classList.add('active');
        galleryContent.classList.add('show', 'active');
        
        // Trigger Bootstrap's tab event
        const tabEvent = new Event('shown.bs.tab', { bubbles: true });
        galleryTab.dispatchEvent(tabEvent);
        
        // Scroll to the gallery section
        galleryContent.scrollIntoView({ behavior: 'smooth' });
        
        console.log('Successfully switched to gallery section');
      } else {
        console.error('Could not find required elements for tab switching');
      }
    }

    // Function to initialize form submission for a specific tab
    function initializeFormSubmission(tabId) {
      let form;
      
      switch(tabId) {
        case '#hero':
          form = document.getElementById('heroSectionForm');
          break;
        case '#gallery':
          form = document.getElementById('galleryForm');
          break;
        case '#why':
          form = document.getElementById('whyUseToolForm');
          break;
        case '#text-to-anything':
          form = document.getElementById('textToAnythingForm');
          break;
        case '#blogs':
          form = document.getElementById('blogsForm');
          break;
        default:
          return;
      }
      
      if (form) {
        console.log('Initializing form submission for tab:', tabId);
        
        // Remove existing event listener
        const newForm = form.cloneNode(true);
        form.parentNode.replaceChild(newForm, form);
        
        // Re-add image preview event listeners for the new form
        initializeImagePreviews(tabId);
        
        // Add submit event listener
        newForm.addEventListener('submit', async function(event) {
          event.preventDefault();
          console.log('Form submitted for tab:', tabId);
          
          if (!newForm.checkValidity()) {
            event.stopPropagation();
            newForm.classList.add('was-validated');
            return;
          }
          
          // Show loading state
          const submitBtn = newForm.querySelector('button[type="submit"]');
          const originalBtnText = submitBtn.innerHTML;
          submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
          submitBtn.disabled = true;
          
          try {
            // Get form values with null checks
            let title, description;
            
            if (tabId === '#text-to-anything') {
              const titleInput = newForm.querySelector('#textToAnythingTitle');
              const subtitleInput = newForm.querySelector('#textToAnythingSubtitle');
              
              if (!titleInput || !subtitleInput) {
                throw new Error('Required form elements not found for Text to Anything section');
              }
              
              title = titleInput.value;
              description = subtitleInput.value;
            } else {
              const titleInput = newForm.querySelector('[name="title"]');
              const descriptionInput = newForm.querySelector('[name="description"]');
              
              if (!titleInput || !descriptionInput) {
                throw new Error('Required form elements not found');
              }
              
              title = titleInput.value;
              description = descriptionInput.value;
            }
            
            const categoryId = createdCategoryId;
            
            if (!categoryId) {
              throw new Error('Category ID not found. Please create a category first.');
            }
            
            // Create section based on the tab
            const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
            
            let sectionName, sectionSlug, order;
            switch(tabId) {
              case '#hero':
                sectionName = 'Hero Section';
                sectionSlug = 'hero-section';
                order = 1;
                break;
              case '#gallery':
                sectionName = 'Images Gallery';
                sectionSlug = 'images-gallery';
                order = 2;
                break;
              case '#why':
                sectionName = 'Why Use Tool';
                sectionSlug = 'why-use-tool';
                order = 3;
                break;
              case '#text-to-anything':
                sectionName = 'Text to Anything';
                sectionSlug = 'text-to-anything';
                order = 4;
                break;
              case '#blogs':
                sectionName = 'Blogs';
                sectionSlug = 'blogs';
                order = 5;
                break;
            }
            
            // Create section data
            const sectionData = {
              name: sectionName,
              slug: sectionSlug,
              description: sectionName + ' section',
              category: categoryId,
              isFolder: false,
              order: order,
              isActive: true
            };
            
            // Create section
            console.log('Creating section with data:', sectionData);
            const sectionResponse = await fetch('http://localhost:5000/api/sections', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify(sectionData)
            });
            
            if (!sectionResponse.ok) {
              const errorText = await sectionResponse.text();
              console.error('Section creation failed. Status:', sectionResponse.status);
              console.error('Error response:', errorText);
              throw new Error('Failed to create section: ' + errorText);
            }
            
            const sectionResult = await sectionResponse.json();
            console.log('Section created:', sectionResult);
            
            // Process images and create content based on the tab
            let contentData = {
              section: sectionResult._id,
              slug: `${title.toLowerCase().replace(/\s+/g, '-')}-${sectionSlug}`,
              title: title,
              subtitle: description,
              images: [],
              fields: [],
              isActive: true
            };
            
            // Tab-specific processing
            if (tabId === '#hero') {
              // Process hero image
              const heroImage = document.getElementById('heroImage');
              if (heroImage && heroImage.files.length > 0) {
                const imageUrl = await uploadImage(heroImage.files[0], token);
                if (imageUrl) {
                  contentData.images.push({
                    url: imageUrl,
                    alt: title,
                    width: 1200,
                    height: 600
                  });
                }
              }
            } else if (tabId === '#gallery') {
              // Process gallery images
              const galleryItems = document.querySelectorAll('.gallery-image-item');
              for (const item of galleryItems) {
                const fileInput = item.querySelector('.gallery-image-upload');
                if (fileInput && fileInput.files.length > 0) {
                  const imageUrl = await uploadImage(fileInput.files[0], token);
                  if (imageUrl) {
                    contentData.images.push({
                      url: imageUrl,
                      alt: item.querySelector('.gallery-image-title')?.value,
                      title: item.querySelector('.gallery-image-title')?.value,
                      prompt: item.querySelector('.gallery-image-prompt')?.value,
                      width: 800,
                      height: 600
                    });
                  }
                } else if (item.querySelector('.image-preview img')) {
                  // Handle existing images
                  const existingImage = {
                    url: item.querySelector('.image-preview img').src,
                    alt: item.querySelector('.gallery-image-title')?.value,
                    title: item.querySelector('.gallery-image-title')?.value,
                    prompt: item.querySelector('.gallery-image-prompt')?.value,
                    width: 800,
                    height: 600
                  };
                  contentData.images.push(existingImage);
                }
              }
            } else if (tabId === '#why') {
              // Process why use tool
              const whyImage = document.getElementById('whyUseToolImage');
              if (whyImage && whyImage.files.length > 0) {
                const imageUrl = await uploadImage(whyImage.files[0], token);
                if (imageUrl) {
                  contentData.images.push({
                    url: imageUrl,
                    alt: title,
                    width: 600,
                    height: 400
                  });
                }
              }
              
              // Add feature points with improved error handling
              try {
                for (let i = 1; i <= 5; i++) {
                  const featureId = `whyUseToolFeature${i}`;
                  const featureInput = document.getElementById(featureId);
                  
                  // Only add if element exists and has a value
                  if (featureInput && featureInput.value && featureInput.value.trim() !== '') {
                    contentData.fields.push({
                      value: featureInput.value.trim(),
                      order: i - 1
                    });
                  }
                }
              } catch (featureError) {
                console.warn('Error processing feature points:', featureError);
                // Continue without blocking the form submission
              }
            } else if (tabId === '#text-to-anything') {
              // Process text to anything images
              const mainImage = document.getElementById('textToAnythingMainImage');
              if (mainImage && mainImage.files.length > 0) {
                const imageUrl = await uploadImage(mainImage.files[0], token);
                if (imageUrl) {
                  contentData.images.push({
                    url: imageUrl,
                    alt: title,
                    width: 1200,
                    height: 600,
                    isMain: true
                  });
                }
              }
              
              // Process example images if present
              const exampleImages = document.querySelectorAll('[data-image-id]');
              for (let i = 0; i < exampleImages.length; i++) {
                const imgElement = exampleImages[i].querySelector('img');
                if (imgElement && imgElement.src) {
                  // For simplicity, we assume example images are already uploaded
                  // In a real implementation, you might need to upload these too
                  contentData.images.push({
                    url: imgElement.src,
                    alt: `Example ${i + 1}`,
                    width: 600,
                    height: 600,
                    order: i + 1,
                    isExample: true
                  });
                }
              }
            } else if (tabId === '#blogs') {
              // Process blogs
              const blogEntries = document.querySelectorAll('.blog-entry');
              for (let i = 0; i < blogEntries.length; i++) {
                const entry = blogEntries[i];
                const fileInput = entry.querySelector('.blog-image-upload');
                const titleInput = entry.querySelector('.blog-title');
                const dateInput = entry.querySelector('.blog-date');
                const leadToggle = entry.querySelector('.blog-lead-toggle');
                
                if (fileInput && fileInput.files.length > 0 && titleInput && dateInput) {
                  const imageUrl = await uploadImage(fileInput.files[0], token);
                  if (imageUrl) {
                    contentData.fields.push({
                      type: `blog_${i + 1}`,
                      key: `blog_${i + 1}`,
                      value: titleInput?.value,
                      url: imageUrl,
                      date: dateInput?.value,
                      lead: leadToggle.checked,
                      order: i
                    });
                  }
                }
              }
            }
            
            // Create content
            const contentResponse = await fetch('http://localhost:5000/api/content', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
              },
              body: JSON.stringify(contentData)
            });
            
            if (!contentResponse.ok) {
              throw new Error('Content creation failed: ' + contentResponse.statusText);
            }
            
            const contentResult = await contentResponse.json();
            console.log(`${sectionName} content created:`, contentResult);
            
            // If it's the hero section, switch to gallery
            if (tabId === '#hero') {
              // Show success message
              const successAlert = document.createElement('div');
              successAlert.className = 'alert alert-success d-flex align-items-center mb-0';
              successAlert.innerHTML = `
                <i class="bi bi-check-circle-fill me-2"></i>
                <div>
                  <strong>Hero Section created successfully!</strong>
                  <p class="mb-0">Moving to Images Gallery section...</p>
                </div>
              `;
              
              // Add to alert container
              const alertContainer = document.querySelector('.alert-container');
              if (alertContainer) {
                alertContainer.appendChild(successAlert);
                
                // Hide after 3 seconds
                setTimeout(() => {
                  successAlert.remove();
                }, 3000);
              }
              
              // Switch to gallery section
              switchHeroToGallery();
            } else {
              // Show regular success message for other sections
              const successAlert = document.createElement('div');
              successAlert.className = 'alert alert-success d-flex align-items-center mb-0';
              successAlert.innerHTML = `
                <i class="bi bi-check-circle-fill me-2"></i>
                <div>
                  <strong>${sectionName} created successfully!</strong>
                  <p class="mb-0">You can now proceed to the next section.</p>
                </div>
              `;
              
              // Add to alert container
              const alertContainer = document.querySelector('.alert-container');
              if (alertContainer) {
                alertContainer.appendChild(successAlert);
                
                // Hide after 3 seconds
                setTimeout(() => {
                  successAlert.remove();
                }, 3000);
              }
            }
            
            // Reset form
            newForm.reset();
            newForm.classList.remove('was-validated');
            
            // Reset image previews
            newForm.querySelectorAll('.image-preview').forEach(preview => {
              preview.innerHTML = `
                <div class="d-flex align-items-center justify-content-center text-muted h-100">
                  <i class="bi bi-image me-2"></i> No image selected
                </div>
              `;
            });
            
          } catch (error) {
            console.error('Error creating section:', error);
            alert('Error: ' + error.message);
          } finally {
            // Restore button state
            submitBtn.innerHTML = originalBtnText;
            submitBtn.disabled = false;
          }
        });
      } else {
        console.warn('Form not found for tab:', tabId);
      }
    }
    
    // Helper function to upload an image
    async function uploadImage(file, token) {
      if (!file) return null;
      
      try {
        const formData = new FormData();
        formData.append('images', file);
        console.log("Uploading file:", file.name);
        console.log("File size:", file.size);
        console.log("File type:", file.type);
        
        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.IMAGES}`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('Image upload failed with status:', response.status);
          console.error('Error response:', errorText);
          throw new Error(`Image upload failed: ${response.status} ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('Image upload response:', result);
        
        // Handle the actual response format
        if (!result || !result.files || !result.files[0]) {
          console.error('Invalid response format:', result);
          throw new Error('Invalid image upload response format');
        }
        
        // Extract just the URL from the file object
        const fileObject = result.files[0];
        if (typeof fileObject === 'object' && fileObject.url) {
          return fileObject.url;
        }
        
        // If it's already a string URL, return it directly
        return fileObject;
      } catch (error) {
        console.error('Error in uploadImage:', error);
        if (error.message.includes('Failed to fetch')) {
          throw new Error(`Could not connect to the server at ${API_CONFIG.BASE_URL}. Please make sure the backend server is running.`);
        }
        throw error;
      }
    }
    
    // Function to add gallery image item
    function addGalleryImageItem(imageData = null) {
      const galleryImagesContainer = document.getElementById('galleryImagesContainer');
      
      if (!galleryImagesContainer) {
        console.error('Gallery container not found');
        return;
      }
      
      console.log('Adding gallery image item with data:', imageData);
      
      // Hide no images message
      updateGalleryVisibility();
      
      // Create new gallery image item
      const newItem = document.createElement('div');
      newItem.className = 'gallery-image-item mb-4 border rounded p-3 bg-white position-relative';
      
      // Create the HTML string with proper escaping
      const html = `
        <button type="button" class="btn-close position-absolute top-0 end-0 m-2 remove-gallery-image" 
               aria-label="Remove image"></button>
        
        <div class="row g-3">
          <!-- Image Upload -->
          <div class="col-md-4">
            <div class="mb-3">
              <label class="form-label small">Upload Image</label>
              <input type="file" class="form-control form-control-sm gallery-image-upload" 
                     accept="image/*" ${imageData ? '' : 'required'}>
              <div class="invalid-feedback">
                Please select an image.
              </div>
            </div>
            <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mb-2">
              ${imageData ? 
                `<img src="${imageData.url}" class="w-100 h-100 object-fit-cover" alt="${imageData.alt || 'Gallery image'}">` :
                `<div class="d-flex align-items-center justify-content-center text-muted">
                <i class="bi bi-image me-2"></i> No image
                </div>`
              }
            </div>
          </div>
          
          <!-- Image Details -->
          <div class="col-md-8">
            <div class="mb-3">
              <label class="form-label small">Image Title</label>
              <input type="text" class="form-control form-control-sm gallery-image-title" 
                     placeholder="Enter image title" 
                     value="${imageData?.title || ''}"
                     required>
              <div class="invalid-feedback">
                Please provide an image title.
              </div>
            </div>
            
            <div class="mb-3">
              <label class="form-label small">Image Description</label>
              <textarea class="form-control form-control-sm gallery-image-description" rows="2"
                        placeholder="Enter image description" required>${imageData?.description || ''}</textarea>
              <div class="invalid-feedback">
                Please provide an image description.
              </div>
            </div>

            <div class="mb-3">
              <label class="form-label small">Image Prompt</label>
              <textarea class="form-control form-control-sm gallery-image-prompt" rows="2"
                        placeholder="Enter image generation prompt">${imageData?.prompt || ''}</textarea>
              <div class="form-text">
                Optional: The prompt used to generate this image
              </div>
            </div>
            
            <div class="form-check form-switch">
              <input class="form-check-input gallery-image-featured" type="checkbox" role="switch"
                     ${imageData?.featured ? 'checked' : ''}>
              <label class="form-check-label small">Featured Image</label>
            </div>
          </div>
        </div>
      `;
      
      newItem.innerHTML = html;
      
      // Append to container
      galleryImagesContainer.appendChild(newItem);
      window.galleryImagesCount = (window.galleryImagesCount || 0) + 1;
      
      // Debug log after appending
      console.log('New item added. Current gallery items:', {
        count: window.galleryImagesCount,
        titleValue: newItem.querySelector('.gallery-image-title')?.value,
        promptValue: newItem.querySelector('.gallery-image-prompt')?.value,
        descriptionValue: newItem.querySelector('.gallery-image-description')?.value
      });
      
      // Add event listener for remove button
      const removeBtn = newItem.querySelector('.remove-gallery-image');
      if (removeBtn) {
        removeBtn.addEventListener('click', function() {
          newItem.remove();
          window.galleryImagesCount--;
          updateGalleryVisibility();
        });
      }
      
      // Add event listener for image preview if no existing image
      if (!imageData) {
      const fileInput = newItem.querySelector('.gallery-image-upload');
      const previewContainer = newItem.querySelector('.image-preview');
      
      if (fileInput && previewContainer) {
        fileInput.addEventListener('change', function(event) {
          const file = event.target.files[0];
          if (file) {
            const objectUrl = URL.createObjectURL(file);
            previewContainer.innerHTML = `<img src="${objectUrl}" class="w-100 h-100 object-fit-cover" alt="Image Preview">`;
          } else {
            previewContainer.innerHTML = `
              <div class="d-flex align-items-center justify-content-center text-muted">
                <i class="bi bi-image me-2"></i> No image
              </div>
            `;
          }
        });
        }
      }
    }
    
    // Function to update visibility of elements based on gallery image count
    function updateGalleryVisibility() {
      const galleryImagesContainer = document.getElementById('galleryImagesContainer');
      const noGalleryImagesMessage = document.getElementById('noGalleryImages');
      
      if (window.galleryImagesCount === 0) {
        // Show no images message, hide container
        if (noGalleryImagesMessage) noGalleryImagesMessage.classList.remove('d-none');
        if (galleryImagesContainer) galleryImagesContainer.classList.add('d-none');
      } else {
        // Hide no images message, show container
        if (noGalleryImagesMessage) noGalleryImagesMessage.classList.add('d-none');
        if (galleryImagesContainer) galleryImagesContainer.classList.remove('d-none');
      }
    }
    
    // Initialize category form
    if (categoryForm) {
      categoryForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        if (!categoryForm.checkValidity()) {
          event.stopPropagation();
          categoryForm.classList.add('was-validated');
          return;
        }
        
        // Show loading state
        const submitBtn = categoryForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
        submitBtn.disabled = true;
        
        try {
          // Get form data
          const categoryName = document.getElementById('categoryName').value;
          const categoryDescription = document.getElementById('categoryDescription').value;
          const categoryImage = document.getElementById('categoryImage').files[0];
          
          if (!categoryImage) {
            throw new Error('Please select an image');
          }

          const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
          
          // Upload image first
          const formData = new FormData();
          formData.append('images', categoryImage);
          console.log("file", categoryImage);
          console.log("formData", formData);
          
          // Use the uploadImage helper function
          const imageUrl = await uploadImage(categoryImage, token);
          
          if (!imageUrl) {
            throw new Error('Failed to upload image');
          }
          
          // Show preview (optional)
          const previewContainer = document.querySelector('.image-preview');
          if (previewContainer) {
            previewContainer.innerHTML = `<img src="${imageUrl}" class="w-100 h-100 object-fit-cover" alt="Preview">`;
          }
          
          // Create category object
          const newCategory = {
            name: categoryName,
            slug: categoryName.toLowerCase().replace(/\s+/g, '-'),
            description: categoryDescription,
            image: imageUrl,
            isFolder: true,
            parent: null
          };

          // Now send this to create the category
          const categoryResponse = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CATEGORIES}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(newCategory)
          });
          
          if (!categoryResponse.ok) {
            const errorText = await categoryResponse.text();
            console.error('Category creation failed:', errorText);
            throw new Error('Category creation failed: ' + errorText);
          }
          
          const createdCategory = await categoryResponse.json();
          console.log('Category created:', createdCategory);
            
          // Store the category ID for section creation
          createdCategoryId = createdCategory._id || createdCategory.id;
            
          // Set categoryId for all forms
          document.querySelectorAll('input[name="categoryId"]').forEach(input => {
            input.value = createdCategoryId;
          });
          
          // Show success notification in bottom right
          const successAlert = document.getElementById('categorySuccessAlert');
          if (successAlert) {
            // Remove any existing alerts
            const existingAlerts = document.querySelectorAll('.alert:not(#categorySuccessAlert)');
            existingAlerts.forEach(alert => alert.remove());
            
            // Show the alert
            successAlert.classList.remove('d-none');
            
            // Hide after 3 seconds
            setTimeout(() => {
              successAlert.classList.add('d-none');
            }, 3000);
          }
            
          // Hide category form and show section forms
          categoryForm.parentElement.parentElement.classList.add('d-none');
          sectionForms.classList.remove('d-none');
            
          // Scroll to the section forms
          sectionForms.scrollIntoView({ behavior: 'smooth' });
          
        } catch (error) {
          console.error('Error creating category:', error);
          alert('Error creating category: ' + error.message);
        } finally {
          // Restore button state
          submitBtn.innerHTML = originalBtnText;
          submitBtn.disabled = false;
        }
      });
    }

    // Update fetchGalleryContent function to include more debugging
    async function fetchGalleryContent(contentId) {
      try {
        console.log('Starting fetchGalleryContent with ID:', contentId);
        
        const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
        
        console.log('Making API request to:', `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CONTENT}/${contentId}`);
        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.CONTENT}/${contentId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!response.ok) {
          console.error('API request failed:', response.status, response.statusText);
          throw new Error('Failed to fetch gallery content');
        }

        const content = await response.json();
        console.log('API Response received:', content);

        // Clear existing gallery items
        const galleryContainer = document.getElementById('galleryImagesContainer');
        if (galleryContainer) {
          console.log('Clearing existing gallery items');
          galleryContainer.innerHTML = '';
        } else {
          console.error('Gallery container not found!');
          return;
        }

        // Add each image from the content
        if (content.images && content.images.length > 0) {
          console.log('Processing', content.images.length, 'images');
          
          // Process images in order
          const sortedImages = [...content.images].sort((a, b) => (a.order || 0) - (b.order || 0));
          
          sortedImages.forEach((image, index) => {
            console.log(`Processing image ${index + 1}:`, {
              title: image.title,
              prompt: image.prompt,
              alt: image.alt,
              order: image.order,
              url: image.url
            });
            
            // Create image data object with all properties
            const imageData = {
              url: image.url,
              title: image.title || '',
              prompt: image.prompt || '',
              description: image.alt || '',
              alt: image.alt || '',
              featured: false,
              order: image.order || index
            };
            
            console.log('Created image data object:', imageData);
            
            // Add the image item to the gallery
            addGalleryImageItem(imageData);
            
            // Verify the values were set correctly
            setTimeout(() => {
              const newItem = galleryContainer.lastElementChild;
              if (newItem) {
                const titleInput = newItem.querySelector('.gallery-image-title');
                const promptInput = newItem.querySelector('.gallery-image-prompt');
                console.log('Verifying form values:', {
                  title: titleInput?.value,
                  prompt: promptInput?.value,
                  expectedTitle: imageData.title,
                  expectedPrompt: imageData.prompt
                });
              }
            }, 0);
          });
        } else {
          console.log('No images found in the response');
        }

        // Update gallery visibility
        updateGalleryVisibility();
        console.log('Gallery content fetch completed');

      } catch (error) {
        console.error('Error in fetchGalleryContent:', error);
        alert('Error loading gallery content: ' + error.message);
      }
    }

    // Add image preview functionality for category image
    const categoryImageInput = document.getElementById('categoryImage');
    const categoryImagePreview = document.querySelector('.image-preview');

    if (categoryImageInput && categoryImagePreview) {
      categoryImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
          // Create object URL for preview
          const objectUrl = URL.createObjectURL(file);
          
          // Update preview
          categoryImagePreview.innerHTML = `
            <img src="${objectUrl}" class="w-100 h-100 object-fit-contain" alt="Category Preview">
          `;
          
          // Clean up object URL when new file is selected
          categoryImageInput.addEventListener('change', function() {
            URL.revokeObjectURL(objectUrl);
          });
        } else {
          // Reset preview if no file selected
          categoryImagePreview.innerHTML = `
            <div class="d-flex align-items-center justify-content-center text-muted h-100">
              <i class="bi bi-image me-2"></i> No image selected
            </div>
          `;
        }
      });
    }

    // Add image preview functionality for hero image
    const heroImageInput = document.getElementById('heroImage');
    const heroImagePreview = document.querySelector('#hero .image-preview');

    if (heroImageInput && heroImagePreview) {
      heroImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
          // Create object URL for preview
          const objectUrl = URL.createObjectURL(file);
          
          // Update preview
          heroImagePreview.innerHTML = `
            <img src="${objectUrl}" class="w-100 h-100 object-fit-contain" alt="Hero Preview">
          `;
          
          // Clean up object URL when new file is selected
          heroImageInput.addEventListener('change', function() {
            URL.revokeObjectURL(objectUrl);
          });
        } else {
          // Reset preview if no file selected
          heroImagePreview.innerHTML = `
            <div class="d-flex align-items-center justify-content-center text-muted h-100">
              <i class="bi bi-image me-2"></i> No image selected
            </div>
          `;
        }
      });
    }
  });
</script>