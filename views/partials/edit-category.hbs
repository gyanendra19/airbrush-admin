<!-- Edit Category Form -->
<div class="card shadow-sm border-0 mb-4">
  <div class="card-header bg-white py-3">
    <h5 class="card-title mb-0 fw-semibold">Edit Category</h5>
  </div>
  <div class="card-body">
    <form id="editCategoryForm" class="needs-validation" novalidate>
      <div class="mb-3">
        <label for="categoryName" class="form-label">Category Name</label>
        <input type="text" class="form-control" id="categoryName" name="categoryName" 
               placeholder="Enter category name" required>
        <div class="invalid-feedback">
          Please provide a category name.
        </div>
      </div>
      
      <div class="mb-3">
        <label for="categoryDescription" class="form-label">Description</label>
        <textarea class="form-control" id="categoryDescription" name="categoryDescription" 
                  rows="3" placeholder="Enter category description" required></textarea>
        <div class="invalid-feedback">
          Please provide a category description.
        </div>
      </div>

      <div class="mb-3">
        <label for="categoryImage" class="form-label">Category Image</label>
        <input type="file" class="form-control" id="categoryImage" name="categoryImage" 
               accept="image/*">
        <div class="form-text">
          Recommended size: 1200x600px. Max file size: 2MB.
        </div>
        <div class="image-preview ratio ratio-16x9 bg-light rounded overflow-hidden mt-2" style="max-width: 300px;">
          <div class="d-flex align-items-center justify-content-center text-muted">
            <i class="bi bi-image me-2"></i> No image selected
          </div>
        </div>
      </div>
      
      <div class="d-grid gap-2">
        <button type="submit" class="btn btn-primary">
          <i class="bi bi-save me-2"></i> Update Category
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Add alert container at the end of the body -->
<div class="alert-container position-fixed bottom-0 end-0 p-3" style="z-index: 1050;">
  <div id="categorySuccessAlert" class="alert alert-success d-flex align-items-center mb-0 d-none">
    <i class="bi bi-check-circle-fill me-2"></i>
    <div>
      <strong>Category updated successfully!</strong>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const editCategoryForm = document.getElementById('editCategoryForm');
    const categoryNameInput = document.getElementById('categoryName');
    const categoryDescriptionInput = document.getElementById('categoryDescription');
    const categoryImageInput = document.getElementById('categoryImage');
    const imagePreview = document.querySelector('.image-preview');
    
    // Get content ID from URL or fallback
    const getContentId = () => {
      // Get from URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.has('id')) {
        return urlParams.get('id');
      }
      
      // Fallback: check for data-content-id attribute (for backward compatibility)
      if (document.referrer.includes('/edit-category')) {
        const sidebarLink = document.querySelector('a[href="/edit-category"]');
        if (sidebarLink && sidebarLink.getAttribute('data-content-id')) {
          return sidebarLink.getAttribute('data-content-id');
        }
      }
      
      return null;
    };
    
    const categoryId = getContentId();
    console.log('Category ID:', categoryId);
    
    if (!categoryId) {
      alert('No category ID provided');
      return;
    }
    
    // Fetch category data
    async function fetchCategory() {
      try {
        const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
        
        const response = await fetch(`http://localhost:5000/api/categories/id/${categoryId}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch category');
        }
        
        const category = await response.json();
        console.log('Fetched category:', category);
        
        // Populate form fields
        categoryNameInput.value = category.name || '';
        categoryDescriptionInput.value = category.description || '';
        
        // Show existing image if available
        if (category.image) {
          imagePreview.innerHTML = `
            <img src="${category.image}" class="w-100 h-100 object-fit-contain" alt="Category Preview">
          `;
        }
        
      } catch (error) {
        console.error('Error fetching category:', error);
        alert('Error: ' + error.message);
      }
    }
    
    // Initialize image preview
    if (categoryImageInput && imagePreview) {
      categoryImageInput.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
          const objectUrl = URL.createObjectURL(file);
          imagePreview.innerHTML = `
            <img src="${objectUrl}" class="w-100 h-100 object-fit-contain" alt="Category Preview">
          `;
        } else {
          imagePreview.innerHTML = `
            <div class="d-flex align-items-center justify-content-center text-muted">
              <i class="bi bi-image me-2"></i> No image selected
            </div>
          `;
        }
      });
    }
    
    // Handle form submission
    if (editCategoryForm) {
      editCategoryForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        
        if (!editCategoryForm.checkValidity()) {
          event.stopPropagation();
          editCategoryForm.classList.add('was-validated');
          return;
        }
        
        // Show loading state
        const submitBtn = editCategoryForm.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
        submitBtn.disabled = true;
        
        try {
          const token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4MDQ5MWRmMzljZmYwNTljMDY1NWZkMSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc0NTI5ODM4MCwiZXhwIjoxNzQ1Mzg0NzgwfQ._XjN76nKvPZcxOT8TLWvfdfA-0KzqGjHwnZWX5YdntA";
          
          // Get form data
          const categoryName = categoryNameInput.value;
          const categoryDescription = categoryDescriptionInput.value;
          const categoryImage = categoryImageInput.files[0];
          
          // Create update data
          const updateData = {
            name: categoryName,
            slug: categoryName.toLowerCase().replace(/\s+/g, '-'),
            description: categoryDescription,
            isFolder: true,
            parent: null
          };
          
          // Upload new image if provided
          if (categoryImage) {
            const imageUrl = await uploadImage(categoryImage, token);
            if (imageUrl) {
              updateData.image = imageUrl;
            }
          }
          
          // Update category
          const updateResponse = await fetch(`http://localhost:5000/api/categories/id/${categoryId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(updateData)
          });
          
          if (!updateResponse.ok) {
            throw new Error('Failed to update category');
          }
          
          const updatedCategory = await updateResponse.json();
          console.log('Category updated:', updatedCategory);
          
          // Show success message
          const successAlert = document.getElementById('categorySuccessAlert');
          if (successAlert) {
            successAlert.classList.remove('d-none');
            setTimeout(() => {
              successAlert.classList.add('d-none');
            }, 3000);
          }
          
        } catch (error) {
          console.error('Error updating category:', error);
          alert('Error: ' + error.message);
        } finally {
          // Restore button state
          submitBtn.innerHTML = originalBtnText;
          submitBtn.disabled = false;
        }
      });
    }
    
    // Helper function to upload image
    async function uploadImage(file, token) {
      if (!file) return null;
      
      try {
        const formData = new FormData();
        formData.append('images', file);
        
        const response = await fetch('http://localhost:5000/api/images', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('Failed to upload image');
        }
        
        const result = await response.json();
        return result.files[0].url;
        
      } catch (error) {
        console.error('Error uploading image:', error);
        throw error;
      }
    }
    
    // Fetch category data on page load
    fetchCategory();
  });
</script>

<style>
  .alert-container {
    min-width: 300px;
    max-width: 500px;
  }

  .alert-container .alert {
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    border: none;
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style> 